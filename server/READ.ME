npm init
npm i express config chalk@4.1.2 mongoose // 4.1.2 работает с require
npm i -D nodemon cross-env
npm i bcryptjs - шифрование
npm i jsonwebtoken - генерация web-токенов
npm i express-validator
npm i cors - для разрешения кросс-доменные запросов

Для тестирования сбилженных файлов клиента нужно все файлы из папки build  клиента перенести
в какую нибудь подпапку сервера

Запускаем приложение в Docker контейнере
концептуально есть образы и контейнеры. Образы строятся один раз и больше не меняются, контейнеры меняются.
Сначала нужно сделать образ
1. в папки client и server добавляем файлы .dockerignore
2. в корень проекта создаем файл DockerFile, в нем будет инструкция для Docker что делать с приложением
3. в этом файле
  ----- первая часть инструкции для докера ----
  FROM node:14 as client  - FROM - говорим, с какой платформой и какой версией будем работать (node, 'клиент точно работает с 14 версией'), as client - назвали первую часть инструкции для докера
  WORKDIR /app/client  - указываем рабочую папку для клиента в образе докера
  COPY client/package.json /app/client  - компируем локальные файлы и папки в образ докера, client/package.json - откула и что (это адрес в проекте),  /app/client - куда (это адрес в образе докера)
  RUN npm install  - установка пакетов в образе докера по скопированному файлу package.json
  COPY client /app/client  - копирование всего приложения клиента в образ докера
  RUN npm run build  - билд клиента в образе
  ------ вторая часть инструкции для докера ------
  FROM node:16-alpine  - версия ноды для сервера (можно было указать FROM node:alpine, но во избежание ошибок Node.js рекомендуется использовать LTS версию Node.js (FROM node:16-alpine)
  WORKDIR /app  - указываем рабочую папку для сервера в образе докера
  COPY server/package.json /app  - также копируем файл с зависимостями из проекта в образ
  RUN npm install - установка зависимостей в образе
  COPY server /app  - копируем всего приложения сервера в образ
  COPY --from=client /app/client/build /app/client  - в образе докера из папки клиента переносим билд в папку сервера
  EXPOSE 8080  - указываем порт, на котором будет запускаться сервер
  CMD [ "npm", "start" ]  - запускаем продакшн-мод
3. docker build -t fcd .  - построить образ, fcd - это имя, точка - из какой папки брать данные (точка - из текущей папки)
4. docker image ls  - проверить что все получилось (должен выдать иноформацию об образе)
5. docker run -d -p 3000:8080 --name fcd --rm fcd    - запускаем контейнер (-p маппим порт внутри докера (8080) на локальный порт, который нам нужен (3000),
--name fcd - fcd имя образа, --rm - удалить, fcd в конце  - имя контейнера. Тут не будет работать сервер
6. docker ps -a  - посмотреть результат при создании контейнера
7. запускаем http://localhost:3000/ в браузере и смотрим
8. docker stop fcd - остановить работу контейнера
9. docker ps -a  - проверить что нет запущенных контейнеров
10. docker run -d -p 3000:8080 --name fcd --rm fcd  - запускаем с привычным портом 8080. Тут все работает
11. docker stop fcd - останавливаем

Работа на хостинге
ssh root@188.68.223.83 - проверка соединенияя с сервером на хостинге, консоль переходит в режим ввода команд для сервера
ls - проверка файлов
git -v - проверка версии гита
apt install git - установка гита на сервер
git clone [HTTPS-адрес проекта в гит]
ls - выдаст fast-company (имя папки)
cd fast-company - переход в папку
docker -v - проверка что стоит докер
docker build -t fcd . - также как и локально, билдим образ
docker image ls - проверяем что сбилдился
docker run -d -p 80:8080 --name fcd --rm fcd  - запускаем контейнер
docker ps - проверяем что контейнер работает

docker run -d -p 80:8080 --name fcd fcd  - запускаем для дебага
docker logs fcd
docker ps -a  - смотрим какие есть контейнеры
docker stop fcd - останавливаем
docker rm fcd - удаляем контейнер
docker image rm fcd - удаляем образ
docker image ls - проверяем что образа нет

git pull - получить с гит-репозитория обновленные данные
nano production.json - посмотреть содежимое файла

Ctrl+d - выход

rf -rf .git  - для удаления гита из проекта